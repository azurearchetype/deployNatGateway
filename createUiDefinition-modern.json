{
    "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
    "handler": "Microsoft.Azure.CreateUIDef",
    "version": "0.1.2-preview",
    "parameters": {
        "config": {
            "basics": {
                "description": "Deploy a NAT Gateway to an existing Virtual Network with selected subnets."
            }
        },
        "basics": [],
        "steps": [
            {
                "name": "networkConfig",
                "label": "Network Configuration",
                "subLabel": {
                    "preValidation": "Configure the virtual network and subnets",
                    "postValidation": "Done"
                },
                "bladeTitle": "Network Configuration",
                "elements": [
                    {
                        "name": "vnetSelector",
                        "type": "Microsoft.Solutions.ResourceSelector",
                        "label": "Virtual Network",
                        "toolTip": "Select an existing virtual network",
                        "resourceType": "Microsoft.Network/virtualNetworks",
                        "options": {
                            "filter": {
                                "subscription": "onBasics",
                                "location": "onBasics"
                            }
                        },
                        "constraints": {
                            "required": true
                        }
                    },
                    {
                        "name": "subnetSelector",
                        "type": "Microsoft.Common.CheckBoxGroup",
                        "label": "Subnets",
                        "toolTip": "Select the subnets to associate with the NAT Gateway",
                        "constraints": {
                            "required": true,
                            "allowedValues": "[map(reference(steps('networkConfig').vnetSelector.id, '2021-08-01').subnets, (item) => createObject('label', concat(item.name, ' (', item.addressPrefix, ')'), 'value', item.name))]"
                        },
                        "visible": "[not(empty(steps('networkConfig').vnetSelector))]"
                    },
                    {
                        "name": "natGatewayName",
                        "type": "Microsoft.Common.TextBox",
                        "label": "NAT Gateway Name",
                        "defaultValue": "[concat('natGateway-', substring(uniqueString(resourceGroup().id), 0, 8))]",
                        "toolTip": "Name for the NAT Gateway resource",
                        "constraints": {
                            "required": true,
                            "regex": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*[a-zA-Z0-9_]$",
                            "validationMessage": "NAT Gateway name must be 1-80 characters and can contain letters, numbers, hyphens, periods, and underscores"
                        }
                    },
                    {
                        "name": "publicIpName",
                        "type": "Microsoft.Common.TextBox",
                        "label": "Public IP Name",
                        "defaultValue": "[concat('pip-natGateway-', substring(uniqueString(resourceGroup().id), 0, 8))]",
                        "toolTip": "Name for the public IP address resource",
                        "constraints": {
                            "required": true,
                            "regex": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*[a-zA-Z0-9_]$",
                            "validationMessage": "Public IP name must be 1-80 characters and can contain letters, numbers, hyphens, periods, and underscores"
                        }
                    }
                ]
            }
        ],
        "outputs": {
            "location": "[location()]",
            "vnetName": "[steps('networkConfig').vnetSelector.name]",
            "vnetResourceGroup": "[steps('networkConfig').vnetSelector.resourceGroup]",
            "subnetNames": "[map(steps('networkConfig').subnetSelector, (item) => createObject('name', item))]",
            "natGatewayName": "[steps('networkConfig').natGatewayName]",
            "publicIpName": "[steps('networkConfig').publicIpName]"
        }
    }
}
